# migrator_direto.py - Vers√£o melhorada
import asyncio
import logging
import os

# Definir vari√°veis diretamente
os.environ['SUPABASE_URL'] = 'https://hifukfkwmhgmkirgjvqf.supabase.co'
os.environ['SUPABASE_ANON_KEY'] = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhpZnVrZmt3bWhnbWtpcmdqdnFmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM3MTM4NTYsImV4cCI6MjA2OTI4OTg1Nn0.Z3qUNcYaghxDB9X79T5uG5vC9EifgKJJBVqQMwag19U'
os.environ['SUPABASE_SERVICE_KEY'] = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhpZnVrZmt3bWhnbWtpcmdqdnFmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzcxMzg1NiwiZXhwIjoyMDY5Mjg5ODU2fQ.OHLG3n48Y3NZN2cQ2z1Qbi0eiMB79eFYl85PXD35loc'
os.environ['JWT_SECRET'] = 'minha-chave-jwt-super-secreta-123456789'

from supabase_client import SupabaseClient

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def criar_admin():
    """Criar usu√°rio admin"""
    try:
        print("üöÄ Iniciando cria√ß√£o do admin...")
        
        supabase = SupabaseClient()
        admin_client = supabase.admin_client
        
        print("‚úÖ Cliente Supabase conectado!")
        
        # Verificar se j√° existe admin
        print("üîç Verificando se admin j√° existe...")
        result = admin_client.table("usuarios").select("*").eq("cargo", "admin").execute()
        
        if result.data:
            print(f"‚úÖ Admin j√° existe: {result.data[0]['nome']} ({result.data[0]['email']})")
            print("üéâ Migra√ß√£o conclu√≠da - Admin j√° configurado!")
            return
        
        print("üë§ Admin n√£o existe, criando novo...")
        
        # Criar admin
        admin_email = "admin@conciliacao.com"
        admin_senha = "admin123"
        admin_nome = "Administrador Sistema"
        
        print(f"üìß Criando usu√°rio: {admin_email}")
        
        try:
            # Tentar criar com timeout maior
            auth_result = await asyncio.wait_for(
                supabase.sign_up(
                    email=admin_email,
                    password=admin_senha,
                    metadata={"nome": admin_nome, "cargo": "admin"}
                ),
                timeout=30.0  # 30 segundos de timeout
            )
            
            if auth_result.user:
                print(f"‚úÖ Usu√°rio criado no Auth: {auth_result.user.id}")
                
                # Criar perfil
                await supabase.create_user_profile(
                    user_id=auth_result.user.id,
                    nome=admin_nome,
                    email=admin_email,
                    cargo="admin"
                )
                
                print(f"‚úÖ Admin criado com sucesso!")
                print(f"üìã Email: {admin_email}")
                print(f"üìã Senha: {admin_senha}")
                print("‚ö†Ô∏è  ALTERE A SENHA EM PRODU√á√ÉO!")
            else:
                print("‚ùå Falha ao criar usu√°rio no Auth")
                
        except asyncio.TimeoutError:
            print("‚è∞ Timeout ao criar usu√°rio - pode ser problema de rede")
            print("üí° Tente novamente ou verifique a conex√£o")
        except Exception as e:
            if "already registered" in str(e).lower():
                print("‚úÖ Usu√°rio j√° existe no Auth, vamos criar s√≥ o perfil")
                # Aqui voc√™ pode tentar fazer login para obter o ID
            else:
                print(f"‚ùå Erro ao criar usu√°rio: {str(e)}")
        
    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")

async def testar_conexao():
    """Testar conex√£o com Supabase"""
    try:
        print("üß™ Testando conex√£o com Supabase...")
        
        supabase = SupabaseClient()
        
        # Testar query simples
        result = supabase.admin_client.table("centros_custo").select("nome").limit(1).execute()
        
        if result.data:
            print(f"‚úÖ Conex√£o OK! Exemplo de dados: {result.data}")
        else:
            print("‚úÖ Conex√£o OK! Tabela vazia mas conectou.")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {str(e)}")
        return False

if __name__ == "__main__":
    # Primeiro testar conex√£o
    print("=" * 50)
    print("üß™ TESTE DE CONEX√ÉO")
    print("=" * 50)
    
    if asyncio.run(testar_conexao()):
        print("\n" + "=" * 50)
        print("üë§ CRIA√á√ÉO DO ADMIN")
        print("=" * 50)
        asyncio.run(criar_admin())
    else:
        print("üí• Falha na conex√£o - n√£o prosseguindo")