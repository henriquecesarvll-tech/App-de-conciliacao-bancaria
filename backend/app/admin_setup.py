# admin_setup.py - Criar admin diretamente no banco
import os
import uuid
from datetime import datetime

# Definir vari√°veis diretamente
os.environ['SUPABASE_URL'] = 'https://hifukfkwmhgmkirgjvqf.supabase.co'
os.environ['SUPABASE_ANON_KEY'] = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhpZnVrZmt3bWhnbWtpcmdqdnFmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM3MTM4NTYsImV4cCI6MjA2OTI4OTg1Nn0.Z3qUNcYaghxDB9X79T5uG5vC9EifgKJJBVqQMwag19U'
os.environ['SUPABASE_SERVICE_KEY'] = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhpZnVrZmt3bWhnbWtpcmdqdnFmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzcxMzg1NiwiZXhwIjoyMDY5Mjg5ODU2fQ.OHLG3n48Y3NZN2cQ2z1Qbi0eiMB79eFYl85PXD35loc'
os.environ['JWT_SECRET'] = 'minha-chave-jwt-super-secreta-123456789'

from supabase_client import SupabaseClient

def criar_admin_direto():
    """Criar admin diretamente na tabela usuarios"""
    try:
        print("üöÄ Configurando admin diretamente no banco...")
        
        supabase = SupabaseClient()
        admin_client = supabase.admin_client
        
        # Verificar se j√° existe admin
        print("üîç Verificando admins existentes...")
        result = admin_client.table("usuarios").select("*").eq("cargo", "admin").execute()
        
        if result.data:
            print(f"‚úÖ Admin j√° existe: {result.data[0]['nome']} ({result.data[0]['email']})")
            return True
        
        print("üë§ Criando admin diretamente na tabela...")
        
        # Gerar UUID fake para admin (normalmente viria do auth)
        admin_id = str(uuid.uuid4())
        admin_email = "admin@conciliacao.com"
        admin_nome = "Administrador Sistema"
        
        # Inserir diretamente na tabela usuarios (usando admin_client para bypassar RLS)
        admin_data = {
            "id": admin_id,
            "nome": admin_nome,
            "email": admin_email,
            "cargo": "admin",
            "ativo": True,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }
        
        result = admin_client.table("usuarios").insert(admin_data).execute()
        
        if result.data:
            print("‚úÖ Admin criado com sucesso na tabela!")
            print(f"üìã ID: {admin_id}")
            print(f"üìã Nome: {admin_nome}")
            print(f"üìã Email: {admin_email}")
            print(f"üìã Cargo: admin")
            print()
            print("‚ö†Ô∏è  IMPORTANTE:")
            print("   - Este admin foi criado apenas na tabela 'usuarios'")
            print("   - Para fazer login, voc√™ precisar√° implementar auth customizado")
            print("   - Ou criar o usu√°rio no Supabase Auth Dashboard manualmente")
            print()
            print("üí° PR√ìXIMOS PASSOS:")
            print("   1. Ir ao Supabase Dashboard ‚Üí Authentication ‚Üí Users")
            print(f"   2. Criar usu√°rio manualmente: {admin_email}")
            print("   3. Copiar o UUID gerado pelo Auth")
            print(f"   4. Atualizar tabela usuarios com o UUID correto")
            
            return True
        else:
            print("‚ùå Falha ao inserir admin na tabela")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def migrar_dados_basicos():
    """Migrar algumas classifica√ß√µes b√°sicas para teste"""
    try:
        print("\nüìÅ Migrando dados de exemplo...")
        
        supabase = SupabaseClient()
        admin_client = supabase.admin_client
        
        # Classifica√ß√µes b√°sicas
        classificacoes_exemplo = [
            {"nome": "RECEITAS", "descricao": "Receitas do sistema"},
            {"nome": "DESPESAS", "descricao": "Despesas do sistema"},
            {"nome": "TRANSFER√äNCIAS", "descricao": "Transfer√™ncias entre contas"}
        ]
        
        for classif in classificacoes_exemplo:
            # Verificar se j√° existe
            existing = admin_client.table("classificacoes").select("*").eq("nome", classif["nome"]).execute()
            
            if not existing.data:
                result = admin_client.table("classificacoes").insert(classif).execute()
                if result.data:
                    print(f"‚úÖ Classifica√ß√£o criada: {classif['nome']}")
                else:
                    print(f"‚ùå Erro ao criar: {classif['nome']}")
            else:
                print(f"‚è≠Ô∏è  J√° existe: {classif['nome']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na migra√ß√£o: {str(e)}")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("üîß SETUP INICIAL DO SISTEMA")
    print("=" * 60)
    
    # Criar admin
    if criar_admin_direto():
        # Migrar dados b√°sicos
        migrar_dados_basicos()
        
        print("\n" + "=" * 60)
        print("üéâ SETUP CONCLU√çDO!")
        print("=" * 60)
        print("‚úÖ Admin criado na tabela usuarios")
        print("‚úÖ Classifica√ß√µes b√°sicas criadas")
        print("‚úÖ Sistema pronto para uso b√°sico")
        print()
        print("üöÄ PR√ìXIMO PASSO: Configurar autentica√ß√£o no seu app.py")
        
    else:
        print("\n‚ùå Falha no setup")